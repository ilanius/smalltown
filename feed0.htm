<!doctype html>
<html id="docuTop">
<head>
  <?php 
    requir0('head', $R);
    $pr = $R['profile'];
    global $C;
  ?>

  <script>
    var profileId      = "<?=$R['profileId']?>";
    var uId            = "<?=$R['uId']?>";
    var uImageId       = "<?=$R['user']['uImageId']?>";
    var profileImage   = '<?=$R['profile']['uImageId']?>';
    var feedType       = '<?=$R['feedType']?>';
    var lastFeedTime   = 0;   // server clock
    var feedUpdateTime = 0;   // client timer
    var feedClearInterval = parseInt('<?=$C->feedClearInterval/2 ?>');
    var feedPosition   = 0;
    var maxScrollY     = window.scrollY;
    var cTimeOut       = 0;

    function buildTree( tree ) {
      let str = '';
      for ( var i in tree ) {
        var p = tree[i];
        str += postCreate( p, buildTree( p['child'] )  );
      }
      return str;
    }  
    function userFeed0( txt ) {  // supplements post tree
       var tree = JSON.parse( txt );
       if ( tree.length > 0 ) feedPosition+= 100; 
       var contPane = gid( 'pId' );
       contPane.innerHTML += buildTree( tree );  
    }
    function userFeed() {
      var sendTxt = `func=${feedType}&profileId=${profileId}&feedPosition=${feedPosition}`;
      httpPost( sendTxt, userFeed0 );
    }
    function rebuildNode0( txt ) {
      var tree = JSON.parse( txt );
      if ( tree.length == 0) return;
      var str = buildTree( tree );
      str = str.replace( /^<div.{10,50}post">/, "<!-- ok -->"); // ugly hack but works
      str = str.replace( /<\/div>$/, "<!-- ok2 -->");
      var node = gid('pId'+tree[0]['pId']);
      if ( node ) node.innerHTML = str;
    }
    function rebuildNode( p ) {
      var sendTxt = `func=rebuildNode&pId=${p['pId']}&rpId=${p['rpId']}`;
      httpPost( sendTxt, rebuildNode0 );
    }
    function feedUpdate0( txt ) {
      var data = JSON.parse( txt );
      var post = data['post'];
      console.log( 'feedUpdate0' + post );
      lastFeedTime = data['lastFeedTime'];
      for ( var i in post ) {
          var p = post[i];
          if ( p['action'] == 'del' ) {
              console.log( 'postDelete0 pId:' + p['pId'] );
              postDelete0( p );   // delPost0
          } else if ( p['action'] == 'mod') {
              console.log( 'rebuildnode mod pId:' + p['pId'] );
              rebuildNode( p );
          } else if ( p['action'] == 'add' ) {
              console.log( 'add pId:' + p['pId'] + ' ' + p['pTxt'] );
              postSubmitAddNewNode0( p );  // addPost0
          }
      }
    }
    function feedUpdate() { 
      /// if ( feedType != 'userEventFeed' ) return;
      clearTimeout( feedUpdateTime ); // this function may be called inside call interval
      var sendTxt = "func=feedUpdate&lastFeedTime="+lastFeedTime;
      // console.log( sendTxt );
      httpPost( sendTxt, feedUpdate0 );
      feedUpdateTime = setTimeout( feedUpdate, 5000 );
    }
  </script>
</head>

<body class="feed">
  
  <?php requir0( 'headPane', $R ); ?>
  
  <div class="profileBox">
    <img src="img/<?=$R['profile']['uImageId']?>" width="100"> 
    <span> <?php echo $pr['uFirstName']. ' '. $pr['uLastName']; ?> </span>
      <?php 
      if ( $R['uId'] != $R['profileId'] ) {
        echo '<span id="row_'.$R['profileId'].'" class="relationBox">';
        echo expressRelation( $R, $R['profile']);
        echo "</span>";
      }
      ?>
      <br>
    <input type="text" id="commentInput" name="commentInput" 
           class="comment" placeholder="What is on your mind" 
           onkeyup="postSubmit(event,this);" >
  </div>
  
  <div id="pId" class="contPane"> <!-- pId is used by script -->
  
  </div>

  <div class="footPane"> 
  -- empty foot pane
  <button onclick="feedUpdate()">feedUpdate</button>
  </div>

  <script>   
    /* **************************************************************** */
    /* When user has a long feed it is not convenient to load everything.
    It would waste server resources (bandwidth,cpu) and if the feed is too long
    neither server nor browser could handle the load. Instead we deliver parts
    of the feed on request. When the user scrolls down we try to catch
    up and fill the feed */
    /* **************************************************************** */
    document.addEventListener( 'scroll', 
      function(e) {
        if ( window.scrollY > maxScrollY ) {
          /* scroll fires a lot. These two lines works as a brake */
          clearTimeout( cTimeOut );
          cTimeOut = setTimeout( userFeed , feedClearInterval ); 
          /* **************************************************** */   
          maxScrollY = window.scrollY;
       }
      } 
    );
    userFeed(); // first load
  </script>
</body>
</html>
