<!doctype html>
<html id="docuTop">
<head>
  <?php 
    requir0('head', $R);
    $pr = $R['profile'];
  ?>

  <script>
    var profileId    = "<?=$R['profileId']?>";
    var uId          = "<?=$R['uId']?>";
    var uImageId     = "<?=$R['user']['uImageId']?>";
    var profileImage = '<?=$R['profile']['uImageId']?>';
    var feedType     = '<?=$R['feedType']?>';
    var lastFeedTime = 0;
    var feedPosition = 0;
    var maxScrollY   = window.scrollY;
    var cTimeOut     = 0;

    /* ***************************************** */
    /* We need to adapt this for efficient auto update of 
    /* relevant parts of feed. When we build and add to 
    /* tree we gather a collection of rpId. 
    /* When auto updating we select 
    /* posts whose pId > maxPid && (rpId in collection)
    /* We add them in order of increasing pId to existing DOM objects
    /* Discuss: ruId, rpId, ppId, pId
    /* ***************************************** */
    function buildTree( tree ) {
      let str = '';
      for ( var i in tree ) {
        var p = tree[i];
        // we could add rpId to a hash here
        // we could also check for maxpId
        str += postCreate( p, buildTree( p['child'] )  );
      }
      return str;
    }  
    function userFeed0( txt ) {  // supplements post tree
       var tree = JSON.parse( txt );
       if ( tree.length > 0 ) feedPosition+= 100; 
       var contPane = gid( 'pId' );
       contPane.innerHTML += buildTree( tree );  
    }
    function userFeed() {
      var sendTxt = `func=${feedType}&profileId=${profileId}&feedPosition=${feedPosition}`;
      httpPost( sendTxt, userFeed0 );
    }
    function rebuildNode0( txt ) {
      var tree = JSON.parse( txt );
      if ( tree.length == 0) return;
      var str = buildTree( tree );
      str = str.replace( /^<div.{10,50}post">/, "<!-- ok -->"); // ugly but...
      str = str.replace( /<\/div>$/, "<!-- ok2 -->");
      var node = gid('pId'+tree[0]['pId']);
      node.innerHTML = str;
    }
    function rebuildNode( p ) {
      var sendTxt = `func=rebuildNode&pId=${p['pId']}&rpId=${p['rpId']}`;
      httpPost( sendTxt, rebuildNode0 );
    }
    function feedUpdate0( txt ) {
      var data = JSON.parse( txt );
      var post = data['post'];
      lastFeedTime = data['lastFeedTime'];
      for ( var i in post ) {
          var p = post[i];
          if ( p['action'] == 'del' ) {
              postDelete0( p );   // delPost0
          } else if ( p['action'] == 'mod') {
              rebuildNode( p );
          } else if ( p['action'] == 'add' ) {
              postSubmitAddNewNode0( p );  // addPost0
          }
      }
    }
    function feedUpdate() { // only called in userEventFeed
      // if ( feedType != 'userEventFeed' ) return;
      var sendTxt = "func=feedUpdate&lastFeedTime="+lastFeedTime;
      httpPost( sendTxt, feedUpdate0 );
    }
  </script>
</head>

<body class="feed">
  
  <?php requir0( 'headPane', $R ); ?>
  
  <div class="profileBox">
    <img src="img/<?=$R['profile']['uImageId']?>" width="100"> 
    <span> <?php echo $pr['uFirstName']. ' '. $pr['uLastName']; ?> </span>
      <?php 
      if ( $R['uId'] != $R['profileId'] ) {
        echo '<span id="row_'.$R['profileId'].'" class="relationBox">';
        echo expressRelation( $R, $R['profile']);
        echo "</span>";
      }
      ?>
      <br>
    <input type="text" id="commentInput" name="commentInput" class="comment" onkeyup="postSubmitTop(event,this);" placeholder="What is on your mind">
  </div>
  
  <div id="pId" class="contPane"> <!-- pId is used by script -->
  
  </div>

  <div class="footPane"> 
  -- empty foot pane
  <button onclick="feedUpdate()">feedUpdate</button>
  </div>

  <script>   
    /* **************************************************************** */
    /* When user has a long feed it is not convenient to load everything.
    It would waste server resources (bandwidth,cpu) and if the feed is too long
    neither server nor browser could handle the load. Instead we deliver parts
    of the feed on request. When the user scrolls down we try to catch
    up and fill the feed */
    /* **************************************************************** */
    document.addEventListener( 'scroll', 
      function(e) {
        if ( window.scrollY > maxScrollY ) {
          /* scroll fires a lot. These two lines works as a brake */
          clearTimeout( cTimeOut );
          cTimeOut = setTimeout( userFeed , 1000 ); 
          /* **************************************************** */   
          maxScrollY = window.scrollY;
       }
      } 
    );
    userFeed(); // first load
  </script>
</body>
</html>
